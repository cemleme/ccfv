// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MessageReceived extends ethereum.Event {
  get params(): MessageReceived__Params {
    return new MessageReceived__Params(this);
  }
}

export class MessageReceived__Params {
  _event: MessageReceived;

  constructor(event: MessageReceived) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get text(): string {
    return this._event.parameters[3].value.toString();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[4].value.toString();
  }

  get description(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ProvidedFund extends ethereum.Event {
  get params(): ProvidedFund__Params {
    return new ProvidedFund__Params(this);
  }
}

export class ProvidedFund__Params {
  _event: ProvidedFund;

  constructor(event: ProvidedFund) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotedFor extends ethereum.Event {
  get params(): VotedFor__Params {
    return new VotedFor__Params(this);
  }
}

export class VotedFor__Params {
  _event: VotedFor;

  constructor(event: VotedFor) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get votePower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CCFVMaster__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class CCFVMaster__getLastReceivedMessageDetailsResult {
  value0: Bytes;
  value1: string;
  value2: Address;
  value3: BigInt;

  constructor(value0: Bytes, value1: string, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getMessageId(): Bytes {
    return this.value0;
  }

  getText(): string {
    return this.value1;
  }

  getTokenAddress(): Address {
    return this.value2;
  }

  getTokenAmount(): BigInt {
    return this.value3;
  }
}

export class CCFVMaster__getLeftCursorToUpdateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUpdate(): boolean {
    return this.value0;
  }

  getCursor(): BigInt {
    return this.value1;
  }
}

export class CCFVMaster__getProposalResultProposalStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get target(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get votesApproved(): BigInt {
    return this[4].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get closeTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get success(): boolean {
    return this[7].toBoolean();
  }

  get onQueue(): boolean {
    return this[8].toBoolean();
  }
}

export class CCFVMaster__getProposalResult {
  value0: CCFVMaster__getProposalResultProposalStruct;
  value1: BigInt;

  constructor(
    value0: CCFVMaster__getProposalResultProposalStruct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getProposal(): CCFVMaster__getProposalResultProposalStruct {
    return this.value0;
  }

  getRequiredVote(): BigInt {
    return this.value1;
  }
}

export class CCFVMaster__getProposalsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get target(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get votesApproved(): BigInt {
    return this[4].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get closeTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get success(): boolean {
    return this[7].toBoolean();
  }

  get onQueue(): boolean {
    return this[8].toBoolean();
  }
}

export class CCFVMaster__getStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLifetimeFunds(): BigInt {
    return this.value0;
  }

  getCurrentFunds(): BigInt {
    return this.value1;
  }

  getUserFunds(): BigInt {
    return this.value2;
  }
}

export class CCFVMaster__proposalsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getTarget(): Address {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getVotesApproved(): BigInt {
    return this.value4;
  }

  getStartTimestamp(): BigInt {
    return this.value5;
  }

  getCloseTimestamp(): BigInt {
    return this.value6;
  }

  getSuccess(): boolean {
    return this.value7;
  }

  getOnQueue(): boolean {
    return this.value8;
  }
}

export class CCFVMaster extends ethereum.SmartContract {
  static bind(address: Address): CCFVMaster {
    return new CCFVMaster("CCFVMaster", address);
  }

  allowlistedSenders(param0: Address): boolean {
    let result = super.call(
      "allowlistedSenders",
      "allowlistedSenders(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowlistedSenders(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowlistedSenders",
      "allowlistedSenders(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowlistedSourceChains(param0: BigInt): boolean {
    let result = super.call(
      "allowlistedSourceChains",
      "allowlistedSourceChains(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowlistedSourceChains(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowlistedSourceChains",
      "allowlistedSourceChains(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkUpkeep(param0: Bytes): CCFVMaster__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new CCFVMaster__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<CCFVMaster__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVMaster__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  fundingToken(): Address {
    let result = super.call("fundingToken", "fundingToken():(address)", []);

    return result[0].toAddress();
  }

  try_fundingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("fundingToken", "fundingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCursors(): BigInt {
    let result = super.call("getCursors", "getCursors():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCursors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCursors", "getCursors():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastReceivedMessageDetails(): CCFVMaster__getLastReceivedMessageDetailsResult {
    let result = super.call(
      "getLastReceivedMessageDetails",
      "getLastReceivedMessageDetails():(bytes32,string,address,uint256)",
      []
    );

    return new CCFVMaster__getLastReceivedMessageDetailsResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getLastReceivedMessageDetails(): ethereum.CallResult<
    CCFVMaster__getLastReceivedMessageDetailsResult
  > {
    let result = super.tryCall(
      "getLastReceivedMessageDetails",
      "getLastReceivedMessageDetails():(bytes32,string,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVMaster__getLastReceivedMessageDetailsResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getLeftCursorToUpdate(): CCFVMaster__getLeftCursorToUpdateResult {
    let result = super.call(
      "getLeftCursorToUpdate",
      "getLeftCursorToUpdate():(bool,uint256)",
      []
    );

    return new CCFVMaster__getLeftCursorToUpdateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getLeftCursorToUpdate(): ethereum.CallResult<
    CCFVMaster__getLeftCursorToUpdateResult
  > {
    let result = super.tryCall(
      "getLeftCursorToUpdate",
      "getLeftCursorToUpdate():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVMaster__getLeftCursorToUpdateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getProposal(_proposalId: BigInt): CCFVMaster__getProposalResult {
    let result = super.call(
      "getProposal",
      "getProposal(uint256):((uint256,address,address,uint256,uint256,uint32,uint32,bool,bool),uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)]
    );

    return changetype<CCFVMaster__getProposalResult>(
      new CCFVMaster__getProposalResult(
        changetype<CCFVMaster__getProposalResultProposalStruct>(
          result[0].toTuple()
        ),
        result[1].toBigInt()
      )
    );
  }

  try_getProposal(
    _proposalId: BigInt
  ): ethereum.CallResult<CCFVMaster__getProposalResult> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(uint256):((uint256,address,address,uint256,uint256,uint32,uint32,bool,bool),uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CCFVMaster__getProposalResult>(
        new CCFVMaster__getProposalResult(
          changetype<CCFVMaster__getProposalResultProposalStruct>(
            value[0].toTuple()
          ),
          value[1].toBigInt()
        )
      )
    );
  }

  getProposalCost(): BigInt {
    let result = super.call(
      "getProposalCost",
      "getProposalCost():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalCost",
      "getProposalCost():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposals(
    offset: BigInt,
    size: BigInt
  ): Array<CCFVMaster__getProposalsResultValue0Struct> {
    let result = super.call(
      "getProposals",
      "getProposals(uint256,uint256):((uint256,address,address,uint256,uint256,uint32,uint32,bool,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return result[0].toTupleArray<CCFVMaster__getProposalsResultValue0Struct>();
  }

  try_getProposals(
    offset: BigInt,
    size: BigInt
  ): ethereum.CallResult<Array<CCFVMaster__getProposalsResultValue0Struct>> {
    let result = super.tryCall(
      "getProposals",
      "getProposals(uint256,uint256):((uint256,address,address,uint256,uint256,uint32,uint32,bool,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CCFVMaster__getProposalsResultValue0Struct>()
    );
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStats(user: Address): CCFVMaster__getStatsResult {
    let result = super.call(
      "getStats",
      "getStats(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new CCFVMaster__getStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getStats(user: Address): ethereum.CallResult<CCFVMaster__getStatsResult> {
    let result = super.tryCall(
      "getStats",
      "getStats(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVMaster__getStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalCreationPrice(): BigInt {
    let result = super.call(
      "proposalCreationPrice",
      "proposalCreationPrice():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCreationPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCreationPrice",
      "proposalCreationPrice():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalCursorLeft(): BigInt {
    let result = super.call(
      "proposalCursorLeft",
      "proposalCursorLeft():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCursorLeft(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCursorLeft",
      "proposalCursorLeft():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalCursorRight(): BigInt {
    let result = super.call(
      "proposalCursorRight",
      "proposalCursorRight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCursorRight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCursorRight",
      "proposalCursorRight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalDuration(): BigInt {
    let result = super.call(
      "proposalDuration",
      "proposalDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDuration",
      "proposalDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposals(proposalId: BigInt): CCFVMaster__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(uint256,address,address,uint256,uint256,uint32,uint32,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return new CCFVMaster__proposalsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean()
    );
  }

  try_proposals(
    proposalId: BigInt
  ): ethereum.CallResult<CCFVMaster__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(uint256,address,address,uint256,uint256,uint32,uint32,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVMaster__proposalsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean()
      )
    );
  }

  queuePeriod(): BigInt {
    let result = super.call("queuePeriod", "queuePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_queuePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queuePeriod", "queuePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingFund(): BigInt {
    let result = super.call("remainingFund", "remainingFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_remainingFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingFund",
      "remainingFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requiredProposalPercentage(): BigInt {
    let result = super.call(
      "requiredProposalPercentage",
      "requiredProposalPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_requiredProposalPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredProposalPercentage",
      "requiredProposalPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalFund(): BigInt {
    let result = super.call("totalFund", "totalFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFund", "totalFund():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userVotePower(user: Address): BigInt {
    let result = super.call(
      "userVotePower",
      "userVotePower(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_userVotePower(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userVotePower",
      "userVotePower(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userVoted(user: Address, proposalId: BigInt): boolean {
    let result = super.call("userVoted", "userVoted(address,uint256):(bool)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_userVoted(
    user: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userVoted",
      "userVoted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feedLinkEth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _proposalCreationPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AllowlistSenderCall extends ethereum.Call {
  get inputs(): AllowlistSenderCall__Inputs {
    return new AllowlistSenderCall__Inputs(this);
  }

  get outputs(): AllowlistSenderCall__Outputs {
    return new AllowlistSenderCall__Outputs(this);
  }
}

export class AllowlistSenderCall__Inputs {
  _call: AllowlistSenderCall;

  constructor(call: AllowlistSenderCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AllowlistSenderCall__Outputs {
  _call: AllowlistSenderCall;

  constructor(call: AllowlistSenderCall) {
    this._call = call;
  }
}

export class AllowlistSourceChainCall extends ethereum.Call {
  get inputs(): AllowlistSourceChainCall__Inputs {
    return new AllowlistSourceChainCall__Inputs(this);
  }

  get outputs(): AllowlistSourceChainCall__Outputs {
    return new AllowlistSourceChainCall__Outputs(this);
  }
}

export class AllowlistSourceChainCall__Inputs {
  _call: AllowlistSourceChainCall;

  constructor(call: AllowlistSourceChainCall) {
    this._call = call;
  }

  get _sourceChainSelector(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AllowlistSourceChainCall__Outputs {
  _call: AllowlistSourceChainCall;

  constructor(call: AllowlistSourceChainCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CloseFailedProposalCall extends ethereum.Call {
  get inputs(): CloseFailedProposalCall__Inputs {
    return new CloseFailedProposalCall__Inputs(this);
  }

  get outputs(): CloseFailedProposalCall__Outputs {
    return new CloseFailedProposalCall__Outputs(this);
  }
}

export class CloseFailedProposalCall__Inputs {
  _call: CloseFailedProposalCall;

  constructor(call: CloseFailedProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseFailedProposalCall__Outputs {
  _call: CloseFailedProposalCall;

  constructor(call: CloseFailedProposalCall) {
    this._call = call;
  }
}

export class CreateProposalCall extends ethereum.Call {
  get inputs(): CreateProposalCall__Inputs {
    return new CreateProposalCall__Inputs(this);
  }

  get outputs(): CreateProposalCall__Outputs {
    return new CreateProposalCall__Outputs(this);
  }
}

export class CreateProposalCall__Inputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get title(): string {
    return this._call.inputValues[2].value.toString();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateProposalCall__Outputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class ProcessQueuedProposalCall extends ethereum.Call {
  get inputs(): ProcessQueuedProposalCall__Inputs {
    return new ProcessQueuedProposalCall__Inputs(this);
  }

  get outputs(): ProcessQueuedProposalCall__Outputs {
    return new ProcessQueuedProposalCall__Outputs(this);
  }
}

export class ProcessQueuedProposalCall__Inputs {
  _call: ProcessQueuedProposalCall;

  constructor(call: ProcessQueuedProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessQueuedProposalCall__Outputs {
  _call: ProcessQueuedProposalCall;

  constructor(call: ProcessQueuedProposalCall) {
    this._call = call;
  }
}

export class ProvideFundCall extends ethereum.Call {
  get inputs(): ProvideFundCall__Inputs {
    return new ProvideFundCall__Inputs(this);
  }

  get outputs(): ProvideFundCall__Outputs {
    return new ProvideFundCall__Outputs(this);
  }
}

export class ProvideFundCall__Inputs {
  _call: ProvideFundCall;

  constructor(call: ProvideFundCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProvideFundCall__Outputs {
  _call: ProvideFundCall;

  constructor(call: ProvideFundCall) {
    this._call = call;
  }
}

export class QueueProposalCall extends ethereum.Call {
  get inputs(): QueueProposalCall__Inputs {
    return new QueueProposalCall__Inputs(this);
  }

  get outputs(): QueueProposalCall__Outputs {
    return new QueueProposalCall__Outputs(this);
  }
}

export class QueueProposalCall__Inputs {
  _call: QueueProposalCall;

  constructor(call: QueueProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QueueProposalCall__Outputs {
  _call: QueueProposalCall;

  constructor(call: QueueProposalCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateLeftCursorCall extends ethereum.Call {
  get inputs(): UpdateLeftCursorCall__Inputs {
    return new UpdateLeftCursorCall__Inputs(this);
  }

  get outputs(): UpdateLeftCursorCall__Outputs {
    return new UpdateLeftCursorCall__Outputs(this);
  }
}

export class UpdateLeftCursorCall__Inputs {
  _call: UpdateLeftCursorCall;

  constructor(call: UpdateLeftCursorCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateLeftCursorCall__Outputs {
  _call: UpdateLeftCursorCall;

  constructor(call: UpdateLeftCursorCall) {
    this._call = call;
  }
}

export class VoteForProposalCall extends ethereum.Call {
  get inputs(): VoteForProposalCall__Inputs {
    return new VoteForProposalCall__Inputs(this);
  }

  get outputs(): VoteForProposalCall__Outputs {
    return new VoteForProposalCall__Outputs(this);
  }
}

export class VoteForProposalCall__Inputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteForProposalCall__Outputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }
}
