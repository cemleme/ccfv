// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MessageSent extends ethereum.Event {
  get params(): MessageSent__Params {
    return new MessageSent__Params(this);
  }
}

export class MessageSent__Params {
  _event: MessageSent;

  constructor(event: MessageSent) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get feeToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get voteAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProvidedFund extends ethereum.Event {
  get params(): ProvidedFund__Params {
    return new ProvidedFund__Params(this);
  }
}

export class ProvidedFund__Params {
  _event: ProvidedFund;

  constructor(event: ProvidedFund) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Response extends ethereum.Event {
  get params(): Response__Params {
    return new Response__Params(this);
  }
}

export class Response__Params {
  _event: Response;

  constructor(event: Response) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get character(): string {
    return this._event.parameters[1].value.toString();
  }

  get response(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get err(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class VotedFor extends ethereum.Event {
  get params(): VotedFor__Params {
    return new VotedFor__Params(this);
  }
}

export class VotedFor__Params {
  _event: VotedFor;

  constructor(event: VotedFor) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get votePower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CCFVNode__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class CCFVNode__getStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getLifetimeFunds(): BigInt {
    return this.value0;
  }

  getUserFunds(): BigInt {
    return this.value1;
  }

  getFundsToBridge(): BigInt {
    return this.value2;
  }

  getVotesToBridge(): BigInt {
    return this.value3;
  }

  getProposalNonce(): BigInt {
    return this.value4;
  }

  getCanUpdateProposalNonce(): boolean {
    return this.value5;
  }

  getProposalsWaitingUpdate(): Array<BigInt> {
    return this.value6;
  }
}

export class CCFVNode extends ethereum.SmartContract {
  static bind(address: Address): CCFVNode {
    return new CCFVNode("CCFVNode", address);
  }

  allowlistedDestinationChains(param0: BigInt): boolean {
    let result = super.call(
      "allowlistedDestinationChains",
      "allowlistedDestinationChains(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowlistedDestinationChains(
    param0: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowlistedDestinationChains",
      "allowlistedDestinationChains(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bridgeFundsAndVotes(): Bytes {
    let result = super.call(
      "bridgeFundsAndVotes",
      "bridgeFundsAndVotes():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_bridgeFundsAndVotes(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "bridgeFundsAndVotes",
      "bridgeFundsAndVotes():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bridgeInterval(): BigInt {
    let result = super.call("bridgeInterval", "bridgeInterval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bridgeInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bridgeInterval",
      "bridgeInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkUpkeep(param0: Bytes): CCFVNode__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new CCFVNode__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<CCFVNode__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVNode__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  cursorUpdateInterval(): BigInt {
    let result = super.call(
      "cursorUpdateInterval",
      "cursorUpdateInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cursorUpdateInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cursorUpdateInterval",
      "cursorUpdateInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  destinationChain(): BigInt {
    let result = super.call(
      "destinationChain",
      "destinationChain():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_destinationChain(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "destinationChain",
      "destinationChain():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingToken(): Address {
    let result = super.call("fundingToken", "fundingToken():(address)", []);

    return result[0].toAddress();
  }

  try_fundingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("fundingToken", "fundingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundsWaiting(): BigInt {
    let result = super.call("fundsWaiting", "fundsWaiting():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundsWaiting(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundsWaiting", "fundsWaiting():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStats(user: Address): CCFVNode__getStatsResult {
    let result = super.call(
      "getStats",
      "getStats(address):(uint256,uint256,uint256,uint256,uint256,bool,uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return new CCFVNode__getStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigIntArray()
    );
  }

  try_getStats(user: Address): ethereum.CallResult<CCFVNode__getStatsResult> {
    let result = super.tryCall(
      "getStats",
      "getStats(address):(uint256,uint256,uint256,uint256,uint256,bool,uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CCFVNode__getStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigIntArray()
      )
    );
  }

  lastBridge(): BigInt {
    let result = super.call("lastBridge", "lastBridge():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastBridge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastBridge", "lastBridge():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCursorUpdate(): BigInt {
    let result = super.call(
      "lastCursorUpdate",
      "lastCursorUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCursorUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCursorUpdate",
      "lastCursorUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterAddress(): Address {
    let result = super.call("masterAddress", "masterAddress():(address)", []);

    return result[0].toAddress();
  }

  try_masterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterAddress",
      "masterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterAddressString(): string {
    let result = super.call(
      "masterAddressString",
      "masterAddressString():(string)",
      []
    );

    return result[0].toString();
  }

  try_masterAddressString(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "masterAddressString",
      "masterAddressString():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  minFundsToBridge(): BigInt {
    let result = super.call(
      "minFundsToBridge",
      "minFundsToBridge():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundsToBridge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundsToBridge",
      "minFundsToBridge():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalCursorLeft(): BigInt {
    let result = super.call(
      "proposalCursorLeft",
      "proposalCursorLeft():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCursorLeft(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCursorLeft",
      "proposalCursorLeft():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalCursorRight(): BigInt {
    let result = super.call(
      "proposalCursorRight",
      "proposalCursorRight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCursorRight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCursorRight",
      "proposalCursorRight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalIdsWithWaitingVotes(param0: BigInt): BigInt {
    let result = super.call(
      "proposalIdsWithWaitingVotes",
      "proposalIdsWithWaitingVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalIdsWithWaitingVotes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalIdsWithWaitingVotes",
      "proposalIdsWithWaitingVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalTotalVotes(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalTotalVotes",
      "proposalTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalTotalVotes(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalTotalVotes",
      "proposalTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotesWaiting(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalVotesWaiting",
      "proposalVotesWaiting(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalVotesWaiting(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalVotesWaiting",
      "proposalVotesWaiting(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  routerAddress(): Address {
    let result = super.call("routerAddress", "routerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_routerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "routerAddress",
      "routerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_lastError(): Bytes {
    let result = super.call("s_lastError", "s_lastError():(bytes)", []);

    return result[0].toBytes();
  }

  try_s_lastError(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("s_lastError", "s_lastError():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_lastRequestId(): Bytes {
    let result = super.call(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_s_lastRequestId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_lastResponse(): Bytes {
    let result = super.call("s_lastResponse", "s_lastResponse():(bytes)", []);

    return result[0].toBytes();
  }

  try_s_lastResponse(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "s_lastResponse",
      "s_lastResponse():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  subscriptionId(): BigInt {
    let result = super.call("subscriptionId", "subscriptionId():(uint64)", []);

    return result[0].toBigInt();
  }

  try_subscriptionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionId",
      "subscriptionId():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDonation(): BigInt {
    let result = super.call("totalDonation", "totalDonation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDonation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDonation",
      "totalDonation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateProposalCursors(): Bytes {
    let result = super.call(
      "updateProposalCursors",
      "updateProposalCursors():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_updateProposalCursors(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "updateProposalCursors",
      "updateProposalCursors():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  userVotePower(user: Address): BigInt {
    let result = super.call(
      "userVotePower",
      "userVotePower(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_userVotePower(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userVotePower",
      "userVotePower(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userVoted(user: Address, proposalId: BigInt): boolean {
    let result = super.call("userVoted", "userVoted(address,uint256):(bool)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_userVoted(
    user: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userVoted",
      "userVoted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votesWaiting(): BigInt {
    let result = super.call("votesWaiting", "votesWaiting():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votesWaiting(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votesWaiting", "votesWaiting():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _link(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _masterAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _functionsRouter(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _functionsDonID(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _minFundsToBridge(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class BridgeFundsAndVotesCall extends ethereum.Call {
  get inputs(): BridgeFundsAndVotesCall__Inputs {
    return new BridgeFundsAndVotesCall__Inputs(this);
  }

  get outputs(): BridgeFundsAndVotesCall__Outputs {
    return new BridgeFundsAndVotesCall__Outputs(this);
  }
}

export class BridgeFundsAndVotesCall__Inputs {
  _call: BridgeFundsAndVotesCall;

  constructor(call: BridgeFundsAndVotesCall) {
    this._call = call;
  }
}

export class BridgeFundsAndVotesCall__Outputs {
  _call: BridgeFundsAndVotesCall;

  constructor(call: BridgeFundsAndVotesCall) {
    this._call = call;
  }

  get messageId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall extends ethereum.Call {
  get inputs(): HandleOracleFulfillmentCall__Inputs {
    return new HandleOracleFulfillmentCall__Inputs(this);
  }

  get outputs(): HandleOracleFulfillmentCall__Outputs {
    return new HandleOracleFulfillmentCall__Outputs(this);
  }
}

export class HandleOracleFulfillmentCall__Inputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get err(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall__Outputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class ProvideFundCall extends ethereum.Call {
  get inputs(): ProvideFundCall__Inputs {
    return new ProvideFundCall__Inputs(this);
  }

  get outputs(): ProvideFundCall__Outputs {
    return new ProvideFundCall__Outputs(this);
  }
}

export class ProvideFundCall__Inputs {
  _call: ProvideFundCall;

  constructor(call: ProvideFundCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProvideFundCall__Outputs {
  _call: ProvideFundCall;

  constructor(call: ProvideFundCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateProposalCursorsCall extends ethereum.Call {
  get inputs(): UpdateProposalCursorsCall__Inputs {
    return new UpdateProposalCursorsCall__Inputs(this);
  }

  get outputs(): UpdateProposalCursorsCall__Outputs {
    return new UpdateProposalCursorsCall__Outputs(this);
  }
}

export class UpdateProposalCursorsCall__Inputs {
  _call: UpdateProposalCursorsCall;

  constructor(call: UpdateProposalCursorsCall) {
    this._call = call;
  }
}

export class UpdateProposalCursorsCall__Outputs {
  _call: UpdateProposalCursorsCall;

  constructor(call: UpdateProposalCursorsCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class VoteForProposalCall extends ethereum.Call {
  get inputs(): VoteForProposalCall__Inputs {
    return new VoteForProposalCall__Inputs(this);
  }

  get outputs(): VoteForProposalCall__Outputs {
    return new VoteForProposalCall__Outputs(this);
  }
}

export class VoteForProposalCall__Inputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteForProposalCall__Outputs {
  _call: VoteForProposalCall;

  constructor(call: VoteForProposalCall) {
    this._call = call;
  }
}
